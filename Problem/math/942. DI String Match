## 問題連結
### LEVEL：EASY
https://leetcode.com/problems/di-string-match/
  
  
## 說明
  
```
Given a string S that only contains "I" (increase) or "D" (decrease), let N = S.length.

Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1:

If S[i] == "I", then A[i] < A[i+1]
If S[i] == "D", then A[i] > A[i+1]

Example 1:
```
Input: "IDID"
Output: [0,4,1,3,2]
```

Example 2:

```
Input: "III"
Output: [0,1,2,3]
```

Example 3:
```
Input: "DDI"
Output: [3,2,0,1]
```

Note:
```
1 <= S.length <= 10000
S only contains characters "I" or "D".
```

```
  
  
## 如何做
  
 這個問題一開始的時候會比較難以理解，但大概的規則就是
 
 ```遇到I要升，遇到D要減```
 
 那由於string的長度為n，所以可以選擇0, 1, 2, ..., n
 
 比如說是```IID```
 
 output 可以是[0, 1, 2, 3] 或是 [1, 2, 3, 0] 或是 [0, 1, 3, 2]
 
 但是這樣太沒規則了，我們需要想一個比較有規則的方式來讓程式簡潔一點
 
 所以我們遇到I就從最小的數字開始選，這樣下一次的數字一定會比現在的數字還大，也就是升
 
 然後最小數字就+1
 
 當我們遇到D就從最大的數字開始選，這樣下一次的數字一定會比現在的數字還小，也就是減
 
 然後最大數字就-1
 
 最後再append剩下的最後一個數字就完成了
 
 
 
## Code 
```python
class Solution:
    def diStringMatch(self, S: str) -> List[int]:
        max_pick, min_pick, output = len(S), 0, []
        
        for i, s in enumerate(S):
            if s == 'I':
                output.append(min_pick)
                min_pick += 1
            else:
                output.append(max_pick)
                max_pick -= 1
        
        output.append(min_pick)
        return output
        
```
